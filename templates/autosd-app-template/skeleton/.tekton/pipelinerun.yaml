---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: test-with-jumpstarter
  labels:
    backstage.io/kubernetes-id: ${{values.component_id | dump}}
    type: pipeline
  annotations:
    # The event we are targeting as seen from the webhook payload
    # this can be an array too, i.e: [pull_request, push]
    pipelinesascode.tekton.dev/on-event: "[pull_request, push]"

    # The branch or tag we are targeting (ie: main, refs/tags/*)
    pipelinesascode.tekton.dev/on-target-branch: "[main]"

    # Fetch the git-clone task from hub, we are able to reference later on it
    # with taskRef and it will automatically be embedded into our pipeline.
    pipelinesascode.tekton.dev/task: "[git-clone]"
    pipelinesascode.tekton.dev/task-1: ".tekton/tasks/jumpstarter-get-lease.yaml"
    pipelinesascode.tekton.dev/task-2: ".tekton/tasks/jumpstarter-run-command.yaml"
    pipelinesascode.tekton.dev/task-3: ".tekton/tasks/jumpstarter-release-lease.yaml"
    pipelinesascode.tekton.dev/task-4: ".tekton/tasks/jumpstarter-setup-sa-client.yaml"
    pipelinesascode.tekton.dev/task-5: ".tekton/tasks/download.yaml"
    pipelinesascode.tekton.dev/task-6: ".tekton/tasks/task-parse-aib-ci.yaml"
    pipelinesascode.tekton.dev/task-7: ".tekton/tasks/task-aib-builder.yaml"

    # How many runs we want to keep.
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    # The variable with brackets are special to Pipelines as Code
    # They will automatically be expanded with the events from Github.
    - name: repo_url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"

  podTemplate:
    nodeSelector:
      kubernetes.io/arch: arm64
    tolerations:
      - key: "architecture"
        operator: "Equal"
        value: "arm"
        effect: "NoSchedule"

  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    workspaces:
      - name: source-folder
      - name: basic-auth

    tasks:
      - name: fetch-repository
        taskRef:
          name: git-clone
          kind: ClusterTask
        workspaces:
          - name: output
            workspace: source-folder
          - name: basic-auth
            workspace: basic-auth
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)

      - name: build-container
        params:
          - name: IMAGE
            value: ${{values.registry_host}}/${{values.registry_destination}}:$(params.revision) # templated in backstage
          - name: CONTEXT
            value: ./src
          - name: DOCKERFILE
            value: ./src/Containerfile
        runAfter:
          - fetch-repository
        taskRef:
          kind: Task
          name: buildah
        workspaces:
          - name: source
            workspace: source-folder
          - name: dockerconfig
            workspace: docker-config

      - name: tag-container
        params:
          - name: source-image-tag
            value: ${{values.registry_host}}/${{values.registry_destination}}:$(params.revision) # templated in backstage
          - name: target-image-tag
            value: ${{values.registry_host}}/${{values.registry_destination}}:latest # templated in backstage
        runAfter:
          - build-container
        taskRef:
          kind: Task
          name: tag-image
        workspaces:
          - name: dockerconfig
            workspace: docker-config

      - name: prepare-build
        params:
          - name: build-stage
            value: default
        taskRef:
          kind: Task
          name: parse-aib-ci
        runAfter:
          - fetch-repository
        workspaces:
          - name: source
            workspace: source-folder

      - name: automotive-image-builder
        params:
          - name: manifest-file
            value: $(tasks.prepare-build.results.manifest-file)
          - name: distro
            value: $(tasks.prepare-build.results.distro)
          - name: arch
            value: $(tasks.prepare-build.results.arch)
          - name: target
            value: $(tasks.prepare-build.results.target)
          - name: mode
            value: $(tasks.prepare-build.results.mode)
          - name: export_format
            value: $(tasks.prepare-build.results.export_format)

        taskRef:
          kind: Task
          name: aib-builder-task
        runAfter:
          - prepare-build
          - tag-container
        workspaces:
          - name: source
            workspace: source-folder
          - name: dockerconfig
            workspace: docker-config

      - name: prepare-jumpstarter-config
        taskRef:
          name: jumpstarter-setup-sa-client
          kind: Task
        runAfter:
          - fetch-repository
        params:
          - name: endpoint
            value: ${{ values.jumpstarter_host }} # templated in backstage
          - name: namespace
            value: jumpstarter-qemu-exporter
          - name: name
            value: ${{values.owner}}-${{values.component_id}}-build # templated in backstage
          - name: insecure-tls
            value: "true"
        workspaces:
          - name: config-dir
            workspace: source-folder
            subPath: .jumpstarter

      - name: create-jumpstarter-lease
        params:
          - name: exporter-labels
            value:
              - type=virtual
          - name: lease-duration
            value: '00:15:00'   # bump this
          - name: config
            value: "$(tasks.prepare-jumpstarter-config.results.config)"

        taskRef:
          kind: Task
          name: jumpstarter-get-lease
        runAfter:
          - prepare-jumpstarter-config
          - automotive-image-builder

      - name: flash-with-jumpstarter
        params:
          - name: jmp-lease-id
            value: $(tasks.create-jumpstarter-lease.results.jmp-lease-id)
          - name: jmp-jScript
            value: j flasher flash binaries/autosd9-qemu.qcow2 # FIXME this depends on the .aib-ci.yml connfiguration!
          - name: config
            value: "$(tasks.prepare-jumpstarter-config.results.config)"

        taskRef:
          kind: Task
          name: jumpstarter-run-command
        runAfter:
          - create-jumpstarter-lease
        workspaces:
          - name: source
            workspace: source-folder

      - name: test-with-jumpstarter
        params:
          - name: jmp-lease-id
            value: $(tasks.create-jumpstarter-lease.results.jmp-lease-id)
          - name: jmp-jScript
            value: pytest
          - name: config
            value: "$(tasks.prepare-jumpstarter-config.results.config)"

        taskRef:
          kind: Task
          name: jumpstarter-run-command
        runAfter:
          - flash-with-jumpstarter
        workspaces:
          - name: source
            workspace: source-folder
    #
    # Final tasks to release resources and clean up
    #
    finally:
      # always try to release a lease if something goes wrong
      - name: release
        params:
          - name: jmp-lease-id
            value: $(tasks.create-jumpstarter-lease.results.jmp-lease-id)
          - name: config
            value: "$(tasks.prepare-jumpstarter-config.results.config)"

        taskRef:
          kind: Task
          name: jumpstarter-release-lease

  #
  # Workspace definitions
  #
  workspaces:
  - name: source-folder
    volumeClaimTemplate:
      spec:
        storageClassName: gp3-csi
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
  # This workspace will inject secret to help the git-clone task to be able to
  # checkout the private repositories
  - name: basic-auth
    secret:
      secretName: "{{ git_auth_secret }}"

  - name: docker-config
    secret:
      secretName: ${{values.component_id}}-registry-creds # templated in backstage
